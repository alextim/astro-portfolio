---
export interface Props {
  item: SectionItem;
}

import { renderPicture } from 'astro-imagetools/api';
import type { PictureHTMLData } from 'astro-imagetools';
import getImagePath from '@/helpers/getImagePath';
import escapeHTML from '@/lib/escapeHTML';
import getImageFormats from '@/helpers/getImageFormats';

const {
  item: { title, subtitle, image },
} = Astro.props as Props;

const src = getImagePath(image?.src || '');

const { link, style, picture }: PictureHTMLData = await renderPicture({
  src,
  alt: escapeHTML(image?.alt),
  layout: 'fill',
  format: getImageFormats() as unknown as [],
});

let n = picture.indexOf('<img');
let img = picture.substring(n);
n = img.indexOf('>');
img = img.substring(0, n);

const getVal = (tag: string, src: string) => {
  let n = src.indexOf(`${tag}="`);
  let s = src.substring(n + tag.length + 2);
  n = s.indexOf('"');
  const result = s.substring(0, n);
  return result;
};

const imgWidth = getVal('width', img);
const imgHeight = getVal('height', img);
const imgSrc = getVal('src', img);
---

<a role="button" tabindex={-1} class="gallery-box" href={imgSrc} data-pswp-width={imgWidth} data-pswp-height={imgHeight} target="_blank">
  <Fragment set:html={link + style + picture} />

  <div class="gallery-box-caption">
    <div class="project-category">{subtitle}</div>
    <div class="project-name">{title}</div>
  </div>
</a>

<style>
  .gallery-box {
    @apply relative block bg-transparent;

    &:hover > .gallery-box-caption {
      @apply opacity-100;
    }
  }

  .gallery-box-caption {
    @apply absolute bottom-0
    flex h-full w-full flex-col
    items-center justify-center

    bg-[rgba(244,98,58,.9)]
    text-center text-white
    opacity-0 transition-opacity;
  }

  .project-category {
    @apply text-sm font-semibold uppercase text-gray-50;
  }

  .project-name {
    @apply text-lg;
  }
</style>
