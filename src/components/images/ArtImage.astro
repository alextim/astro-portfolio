---
import escapeHTML from '@/lib/escapeHTML';
import getImageFormats from '@/lib/getImageFormats';
import { generateImage, ImageOptions } from '../../astro-eleventy-img';
import { getMetadata, getSrcset } from './utils';

interface Props {
  sources: { src: string; media?: string }[];
  alt?: string;
  options?: ImageOptions;
  sizes?: string;
  classes?: string;
  imgClasses?: string;
  quality?: number;
  loading?: 'lazy' | 'eager';
}

const {
  sources,
  alt = '',
  options = {},
  sizes = '100vw',
  classes = '',
  imgClasses = 'w-full h-auto max-w-full',
  quality = 90,
  loading = 'lazy',
} = Astro.props as Props;

const opts = {
  ...options,
  widths: [null],
  formats: getImageFormats(import.meta.env.IMAGE_FORMATS),
  sharpWebpOptions: {
    quality,
  },
  sharpAvifOptions: {
    quality,
  },
};

const src = sources.filter(({ media }) => !media)[0].src;
const { metadata: metadataDefault, lowsrc, highsrc } = getMetadata(src, opts);

const metadataRest = sources
  .filter(({ media }) => media)
  .map(({ src, media }) => ({
    metadata: generateImage(src, opts),
    media,
  }));
---

<picture class={classes}>
  {metadataRest.map(({ metadata, media }) =>
    Object.values(metadata).map((imageFormat) => (
      <source type={imageFormat[0].sourceType} media={media} srcset={getSrcset(imageFormat)} sizes={sizes} />
    )),
  )}
  {Object.values(metadataDefault).map((imageFormat) => (
    <source type={imageFormat[0].sourceType} srcset={getSrcset(imageFormat)} sizes={sizes} />
  ))}
  <img
    src={lowsrc.url}
    width={highsrc.width}
    height={highsrc.height}
    alt={escapeHTML(alt)}
    loading={loading}
    decoding="async"
    class={imgClasses}
  />
</picture>
