---
import { Markdown } from 'astro/components';
import escapeHTML from '@/lib/escapeHTML';
import { ImageOptions, generatePlaceholder, PlaceholderOptions } from '../../astro-eleventy-img';

import { getMetadata, getSrcset } from './utils';

interface Props {
  src: string;
  alt?: string;
  caption?: string;
  options?: ImageOptions;
  sizes?: string;
  classes?: string;
  imgClasses?: string;
  quality?: number;
  placeholderOptions?: PlaceholderOptions;
}

const {
  src,
  alt = '',
  caption,
  options = {},
  sizes = '',
  classes = '',
  imgClasses = '',
  quality = 90,
  placeholderOptions = {},
} = Astro.props as Props;

const opts = {
  ...options,
  widths: [null],
  formats: import.meta.env.IMAGE_FORMATS.split(','),
  sharpWebpOptions: {
    quality,
  },
  sharpAvifOptions: {
    quality,
  },
};

/*
// const placeHolder = await generatePlaceholder(src, placeholderOptions);

const imageAttributes = {
  sizes: sizes,
  loading: 'lazy',
  decoding: 'async',
  // style: `background-size: cover;background-image:url(${placeHolder.dataURI})`,
  // onload: `this.style.backgroundImage='none'`,
  class: imgClasses,
};
*/
const { metadata, lowsrc, highsrc } = getMetadata(src, opts);
---

<figure class={classes}>
  <picture>
    {Object.values(metadata).map((imageFormat) => <source type={imageFormat[0].sourceType} srcset={getSrcset(imageFormat)} sizes={sizes} />)}
    <img src={lowsrc.url} width={highsrc.width} height={highsrc.height} alt={escapeHTML(alt)} loading="lazy" decoding="async" class={imgClasses}/>
  </picture>
  {caption && (
    <figcaption>
      <Markdown>{escapeHTML(caption)}</Markdown>
    </figcaption>
  )}
</figure>
