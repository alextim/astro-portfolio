---
export interface Props {
  classes?: string;
}

import { Icon } from 'astro-icon';

const THEME_SWITCH_ID = 'theme-switch';
const { classes = '' } = Astro.props as Props;
---

<label class={`theme-switch ${classes}`}>
  <input
    id={THEME_SWITCH_ID}
    type='checkbox'
    title='Switch between dark and light mode (currently light mode)'
    aria-label='Switch between dark and light mode (currently light mode)'
  />
  <Icon name='sun-regular' class='sun' />
  <Icon name='moon-regular' class='moon' />
</label>

<script define:vars={{ THEME_SWITCH_ID }}>
  const DARK_THEME = 'dark';

  const isDarkThemeSet = window.localStorage && window.localStorage.theme === DARK_THEME;
  const isThemeStored = window.localStorage && 'theme' in window.localStorage;
  const isDarkPrefered = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;

  const themeSwitch = document.getElementById(THEME_SWITCH_ID);

  const setToDark = isDarkThemeSet || (!isThemeStored && isDarkPrefered);
  document.documentElement.classList.toggle(DARK_THEME, setToDark);
  themeSwitch.checked = setToDark;

  const onClick = () => {
    const setToDark = themeSwitch.checked;
    document.documentElement.classList.toggle(DARK_THEME, setToDark);
    if (window.localStorage) {
      window.localStorage.theme = setToDark ? DARK_THEME : 'light';
    }
  };

  themeSwitch.addEventListener('click', onClick);
</script>

<style>
  .theme-switch {
    @apply cursor-pointer text-white opacity-50 transition duration-300 hover:opacity-100;
  }

  .sun,
  .moon {
    @apply h-4 w-4;

    fill: white;
  }
  .moon {
    @apply hidden;
  }

  #theme-switch {
    display: none;
    &:checked {
      & + .sun {
        display: none;
      }
      & ~ .moon {
        display: block;
      }
    }
  }
</style>
